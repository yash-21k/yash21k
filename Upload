public String populateLifeCycleBusinessE2EStatus(
        SPIDataHolder gpiDataHolder, String traceId, 
        MessageHeader messageHeader, Map<List<String>, String> lifecycleBusinessE2EStatus) throws Exception {

    String lifeCycleBusinessE2EStatus = null;

    try {
        Logger.info("traceId = {} Populating LifeCycleBusiness E2EStatus for VETR = {}", traceId, messageHeader.getUetr());

        // Extracting values from gpiDataHolder
        String gpiInvestigationCaseType = gpiDataHolder.getGPIDetails().getTransactionInfo().getGPIInvestigationCaseType();
        String assetStatus = gpiDataHolder.getGPIDetails().getTransactionInfo().getAssetStatus();
        String assetSubStatus = gpiDataHolder.getGPIDetails().getTransactionInfo().getAssetSubStatus();

        // Define excluded keywords (converted to lowercase for case-insensitive comparison)
        List<String> excludedKeywords = Arrays.asList("Unable to Effect", "Return of Funds", "Cancellation Request");

        for (Map.Entry<List<String>, String> entry : lifecycleBusinessE2EStatus.entrySet()) {
            List<String> conditions = entry.getKey();

            // Ensure the key list has exactly 3 elements
            if (conditions.size() != 3) {
                continue;
            }

            // Case-insensitive check for exclusion
            boolean isExcluded = excludedKeywords.stream()
                    .anyMatch(keyword -> keyword.equalsIgnoreCase(gpiInvestigationCaseType));

            // Check conditions with case-insensitive matching
            boolean matches = 
                ((conditions.get(0).equalsIgnoreCase("ANY") && !isExcluded) || 
                 conditions.get(0).equalsIgnoreCase(gpiInvestigationCaseType)) &&
                (conditions.get(1).equalsIgnoreCase("ANY") || conditions.get(1).equalsIgnoreCase(assetStatus)) &&
                (conditions.get(2).equalsIgnoreCase("ANY") || conditions.get(2).equalsIgnoreCase(assetSubStatus));

            if (matches) {
                Logger.info("Matched Rule: {} -> {}", conditions, entry.getValue());  // Debugging output
                lifeCycleBusinessE2EStatus = entry.getValue();
                break; // Stop at the first matching rule
            }
        }
    } catch (Exception e) {
        throw new POEventsException(ErrorCode.P00094, Logger, e, traceId, messageHeader.getUetr(), messageHeader.getState());
    }

    return lifeCycleBusinessE2EStatus;
}